# models.py - generated by fastapi-codegen
from __future__ import annotations

from enum import Enum
from typing import List, Optional
from uuid import UUID

from pydantic import BaseModel, Field, RootModel

class RecommendedProductListItem(BaseModel):
    product_id: UUID = Field(
        ...,
        description="The ID of the product.",
        example="123e4567-e89b-12d3-a456-426614174000",
    )
    product_name_en: Optional[str] = Field(
        None, description="The name of the product.", example="Fertilizer ABC"
    )
    product_type: Optional[str] = Field(
        None, description="The category of the product.", example="Fertilizer"
    )
    price: Optional[float] = Field(
        None, description="The price of the product in IDR.", example=100000
    )
    recommendation_id: Optional[UUID] = Field(
        None,
        description="The ID of the recommendation for feedback purposes.",
        example="123e4567-e89b-12d3-a456-426614174000",
    )
    relevance_score: Optional[float] = Field(
        None,
        description="The relevance score based on the recommendation model.",
        example=0.95,
    )


class Action(str, Enum):
    clicked = "clicked"
    added_to_cart = "added_to_cart"
    purchased = "purchased"
    reviewed = "reviewed"


class ApiV1EcommerceRecommendationFeedbackPostRequestBody(BaseModel):
    user_id: UUID = Field(
        ...,
        description="User ID for feedback.",
        example="123e4567-e89b-12d3-a456-426614174000",
    )
    product_id: UUID = Field(
        ...,
        description="Product ID for feedback.",
        example="123e4567-e89b-12d3-a456-426614174000",
    )
    recommendation_id: Optional[UUID] = Field(
        None,
        description="Recommendation ID for feedback.",
        example="123e4567-e89b-12d3-a456-426614174000",
    )
    action: Action = Field(
        ...,
        description="Action performed for feedback.",
        example="clicked",
    )


class ApiV1MessagingChatbotPostRequestBody(BaseModel):
    user_id: UUID = Field(
        ...,
        description="User ID sending the chatbot message.",
        example="123e4567-e89b-12d3-a456-426614174000",
    )
    message: str = Field(
        ...,
        description="Message sent to chatbot in markdown format.",
        example="Hello, how are you?",
    )


class PingGet200Response(BaseModel):
    message: str = Field(
        ...,
        description="Message confirming API is running.",
        example="Pong",
    )


class ErrorResponse(BaseModel):
    message: str = Field(
        ...,
        description="Error message.",
        example="Not Found",
    )


class ApiV1EcommerceRecommendationFeedbackPostResponse(BaseModel):
    message: str = Field(..., example="Feedback given successfully")

class RecommendedProductList(RootModel[List[RecommendedProductListItem]]):
    root: List[RecommendedProductListItem]


class ApiV1MessagingChatbotPost200Response(BaseModel):
    message: str = Field(
        ...,
        description="Chatbot reply message in markdown.",
        example="Hi, how can I help you today?",
    )
    recommended_products: Optional[RecommendedProductList] = None


class ApiV1EcommerceRecommendationUserGet200Response(BaseModel):
    items: Optional[RecommendedProductList] = None


class ApiV1EcommerceRecommendationUserProductPost200Response(BaseModel):
    items: Optional[RecommendedProductList] = None
